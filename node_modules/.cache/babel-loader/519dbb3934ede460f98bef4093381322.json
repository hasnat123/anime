{"ast":null,"code":"import * as React from 'react';\n/**\n * Hook which lets child navigators add action listeners.\n */\n\nexport default function useChildListeners() {\n  const {\n    current: listeners\n  } = React.useRef({\n    action: [],\n    focus: []\n  });\n  const addListener = React.useCallback((type, listener) => {\n    listeners[type].push(listener);\n    let removed = false;\n    return () => {\n      const index = listeners[type].indexOf(listener);\n\n      if (!removed && index > -1) {\n        removed = true;\n        listeners[type].splice(index, 1);\n      }\n    };\n  }, [listeners]);\n  return {\n    listeners,\n    addListener\n  };\n}","map":{"version":3,"sources":["useChildListeners.tsx"],"names":["current","listeners","action","focus","addListener","removed","index"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAIA;AACA;AACA;;AACA,eAAe,SAAA,iBAAA,GAA6B;AAC1C,QAAM;AAAEA,IAAAA,OAAO,EAAEC;AAAX,MAAyB,KAAK,CAAL,MAAA,CAE5B;AACDC,IAAAA,MAAM,EADL,EAAA;AAEDC,IAAAA,KAAK,EAAE;AAFN,GAF4B,CAA/B;AAOA,QAAMC,WAAW,GAAG,KAAK,CAAL,WAAA,CAClB,CAAA,IAAA,EAAA,QAAA,KAAoE;AAClEH,IAAAA,SAAS,CAATA,IAAS,CAATA,CAAAA,IAAAA,CAAAA,QAAAA;AAEA,QAAII,OAAO,GAAX,KAAA;AACA,WAAO,MAAM;AACX,YAAMC,KAAK,GAAGL,SAAS,CAATA,IAAS,CAATA,CAAAA,OAAAA,CAAd,QAAcA,CAAd;;AAEA,UAAI,CAAA,OAAA,IAAYK,KAAK,GAAG,CAAxB,CAAA,EAA4B;AAC1BD,QAAAA,OAAO,GAAPA,IAAAA;AACAJ,QAAAA,SAAS,CAATA,IAAS,CAATA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,CAAAA;AACD;AANH,KAAA;AALgB,GAAA,EAclB,CAdF,SAcE,CAdkB,CAApB;AAiBA,SAAO;AAAA,IAAA,SAAA;AAELG,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import * as React from 'react';\n\nimport type { ListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add action listeners.\n */\nexport default function useChildListeners() {\n  const { current: listeners } = React.useRef<{\n    [K in keyof ListenerMap]: ListenerMap[K][];\n  }>({\n    action: [],\n    focus: [],\n  });\n\n  const addListener = React.useCallback(\n    <T extends keyof ListenerMap>(type: T, listener: ListenerMap[T]) => {\n      listeners[type].push(listener);\n\n      let removed = false;\n      return () => {\n        const index = listeners[type].indexOf(listener);\n\n        if (!removed && index > -1) {\n          removed = true;\n          listeners[type].splice(index, 1);\n        }\n      };\n    },\n    [listeners]\n  );\n\n  return {\n    listeners,\n    addListener,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}