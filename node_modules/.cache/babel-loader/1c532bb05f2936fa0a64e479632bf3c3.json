{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nexport default function createMemoryHistory() {\n  let index = 0;\n  let items = []; // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n\n  const pending = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach(it => {\n      const cb = it.cb;\n\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index() {\n      var _window$history$state; // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n\n\n      const id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n\n      if (id) {\n        const index = items.findIndex(item => item.id === id);\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index) {\n      return items[index];\n    },\n\n    backIndex(_ref) {\n      let {\n        path\n      } = _ref; // We need to find the index from the element before current to get closest path to go back to\n\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push(_ref2) {\n      let {\n        path,\n        state\n      } = _ref2;\n      interrupt();\n      const id = nanoid(); // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n\n      items = items.slice(0, index + 1);\n      items.push({\n        path,\n        state,\n        id\n      });\n      index = items.length - 1; // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n\n      window.history.pushState({\n        id\n      }, '', path);\n    },\n\n    replace(_ref3) {\n      var _window$history$state2, _window$history$state3;\n\n      let {\n        path,\n        state\n      } = _ref3;\n      interrupt();\n      const id = (_window$history$state2 = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id) !== null && _window$history$state2 !== void 0 ? _window$history$state2 : nanoid();\n\n      if (!items.length || items.findIndex(item => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        items = [{\n          path,\n          state,\n          id\n        }];\n        index = 0;\n      } else {\n        items[index] = {\n          path,\n          state,\n          id\n        };\n      }\n\n      window.history.replaceState({\n        id\n      }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n) {\n      interrupt(); // To guard against unexpected navigation out of the app we will assume that browser history is only as deep as the length of our memory\n      // history. If we don't have an item to navigate to then update our index and navigate as far as we can without taking the user out of the app.\n\n      const nextIndex = index + n;\n      const lastItemIndex = items.length - 1;\n\n      if (n < 0 && !items[nextIndex]) {\n        // Attempted to navigate beyond the first index. Negating the current index will align the browser history with the first item.\n        n = -index;\n        index = 0;\n      } else if (n > 0 && nextIndex > lastItemIndex) {\n        // Attempted to navigate past the last index. Calculate how many indices away from the last index and go there.\n        n = lastItemIndex - index;\n        index = lastItemIndex;\n      } else {\n        index = nextIndex;\n      }\n\n      if (n === 0) {\n        return;\n      } // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n\n\n      return new Promise((resolve, reject) => {\n        const done = interrupted => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          } // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n\n\n          const {\n            title\n          } = window.document;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n\n        pending.push({\n          ref: done,\n          cb: done\n        }); // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n\n        const timer = setTimeout(() => {\n          const index = pending.findIndex(it => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          var _window$history$state4;\n\n          const id = (_window$history$state4 = window.history.state) === null || _window$history$state4 === void 0 ? void 0 : _window$history$state4.id;\n          const currentIndex = items.findIndex(item => item.id === id); // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n\n          index = Math.max(currentIndex, 0);\n          const last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last === null || last === void 0 ? void 0 : last.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n      return () => window.removeEventListener('popstate', onPopState);\n    }\n\n  };\n  return history;\n}","map":{"version":3,"sources":["createMemoryHistory.tsx"],"names":["index","items","pending","interrupt","it","cb","history","id","window","item","get","backIndex","path","i","push","state","nanoid","replace","go","nextIndex","lastItemIndex","n","done","interrupted","clearTimeout","reject","title","resolve","ref","timer","setTimeout","onPopState","currentIndex","Math","last","listen","listener"],"mappings":"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","sourcesContent":["import type { NavigationState } from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nexport default function createMemoryHistory() {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach((it) => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index];\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = window.history.state?.id ?? nanoid();\n\n      if (!items.length || items.findIndex((item) => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        items = [{ path, state, id }];\n        index = 0;\n      } else {\n        items[index] = { path, state, id };\n      }\n\n      window.history.replaceState({ id }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      interrupt();\n\n      // To guard against unexpected navigation out of the app we will assume that browser history is only as deep as the length of our memory\n      // history. If we don't have an item to navigate to then update our index and navigate as far as we can without taking the user out of the app.\n      const nextIndex = index + n;\n      const lastItemIndex = items.length - 1;\n      if (n < 0 && !items[nextIndex]) {\n        // Attempted to navigate beyond the first index. Negating the current index will align the browser history with the first item.\n        n = -index;\n        index = 0;\n      } else if (n > 0 && nextIndex > lastItemIndex) {\n        // Attempted to navigate past the last index. Calculate how many indices away from the last index and go there.\n        n = lastItemIndex - index;\n        index = lastItemIndex;\n      } else {\n        index = nextIndex;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise<void>((resolve, reject) => {\n        const done = (interrupted?: boolean) => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const { title } = window.document;\n\n          window.document.title = '';\n          window.document.title = title;\n\n          resolve();\n        };\n\n        pending.push({ ref: done, cb: done });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex((it) => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          const id = window.history.state?.id;\n          const currentIndex = items.findIndex((item) => item.id === id);\n\n          // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n          index = Math.max(currentIndex, 0);\n\n          const last = pending.pop();\n\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n}\n"]},"metadata":{},"sourceType":"module"}