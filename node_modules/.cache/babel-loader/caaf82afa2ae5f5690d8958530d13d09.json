{"ast":null,"code":"import { findFocusedRoute, getActionFromState as getActionFromStateDefault, getPathFromState as getPathFromStateDefault, getStateFromPath as getStateFromPathDefault } from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\nimport createMemoryHistory from './createMemoryHistory';\nimport ServerContext from './ServerContext';\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\n\nconst findMatchingState = (a, b) => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  } // Tab and drawer will have `history` property, but stack will have history in `routes`\n\n\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n  const aChildState = aRoute.state;\n  const bChildState = bRoute.state; // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n/**\n * Run async function in series as it's called.\n */\n\n\nconst series = cb => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n        last === null || last === void 0 ? void 0 : last();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet linkingHandlers = [];\nexport default function useLinking(ref, _ref) {\n  let {\n    independent,\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault\n  } = _ref;\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n  const [history] = React.useState(createMemoryHistory); // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  const server = React.useContext(ServerContext);\n  const getInitialState = React.useCallback(() => {\n    let value;\n\n    if (enabledRef.current) {\n      var _server$location;\n\n      const location = (_server$location = server === null || server === void 0 ? void 0 : server.location) !== null && _server$location !== void 0 ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n\n      catch() {\n        return thenable;\n      }\n\n    };\n    return thenable; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const previousIndexRef = React.useRef(undefined);\n  const previousStateRef = React.useRef(undefined);\n  const pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n    return history.listen(() => {\n      var _previousIndexRef$cur;\n\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n      const previousIndex = (_previousIndexRef$cur = previousIndexRef.current) !== null && _previousIndexRef$cur !== void 0 ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path; // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n\n      const record = history.get(index);\n\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current); // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some(r => !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name)))) {\n          console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(state, configRef.current);\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(`An error occurred when trying to handle the link '${path}': ${typeof e === 'object' && e != null && 'message' in e ? // @ts-expect-error: we're already checking for this\n              e.message : e}`);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(() => {\n    var _ref$current;\n\n    if (!enabled) {\n      return;\n    }\n\n    const getPathForRoute = (route, state) => {\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route !== null && route !== void 0 && route.path) {\n        const stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n\n          if (focusedRoute && focusedRoute.name === route.name && isEqual(focusedRoute.params, route.params)) {\n            return route.path;\n          }\n        }\n      }\n\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({\n          path,\n          state\n        });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState(); // root state may not available, for example when root navigators switch inside the container\n\n      if (!state) {\n        return;\n      }\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined; // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n\n      const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n\n      if (previousFocusedState && focusedState && // We should only handle push/pop if path changed from what was in last `popstate`\n      // Otherwise it's likely a change triggered by `popstate`\n      path !== pendingPath) {\n        const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({\n            path,\n            state\n          });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n          const nextIndex = history.backIndex({\n            path\n          });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            } // Store the updated state as well as fix the path if incorrect\n\n\n            history.replace({\n              path,\n              state\n            });\n          } catch (e) {// The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({\n            path,\n            state\n          });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({\n          path,\n          state\n        });\n      }\n    }; // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n\n\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState\n  };\n}","map":{"version":3,"sources":["useLinking.tsx"],"names":["getActionFromState","getPathFromState","getStateFromPath","findMatchingState","a","b","aHistoryLength","bHistoryLength","aRoute","bRoute","aChildState","bChildState","series","cb","handling","queue","callback","last","linkingHandlers","enabled","getActionFromStateDefault","React","process","console","handler","Symbol","index","enabledRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","server","getInitialState","location","window","path","value","thenable","then","Promise","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","history","navigation","ref","previousIndex","record","state","rootState","r","action","e","getPathForRoute","route","stateForPath","focusedRoute","findFocusedRoute","isEqual","onStateChange","previousState","pendingPath","previousFocusedState","historyDelta","focusedState","nextIndex","currentIndex"],"mappings":"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","sourcesContent":["import {\n  findFocusedRoute,\n  getActionFromState as getActionFromStateDefault,\n  getPathFromState as getPathFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  NavigationState,\n  ParamListBase,\n} from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\n\nimport createMemoryHistory from './createMemoryHistory';\nimport ServerContext from './ServerContext';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet linkingHandlers: Symbol[] = [];\n\ntype Options = LinkingOptions<ParamListBase> & {\n  independent?: boolean;\n};\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    independent,\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options\n) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(\n            state,\n            configRef.current\n          );\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${\n                  typeof e === 'object' && e != null && 'message' in e\n                    ? // @ts-expect-error: we're already checking for this\n                      e.message\n                    : e\n                }`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const getPathForRoute = (\n      route: ReturnType<typeof findFocusedRoute>,\n      state: NavigationState\n    ): string => {\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route?.path) {\n        const stateForPath = getStateFromPathRef.current(\n          route.path,\n          configRef.current\n        );\n\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n\n          if (\n            focusedRoute &&\n            focusedRoute.name === route.name &&\n            isEqual(focusedRoute.params, route.params)\n          ) {\n            return route.path;\n          }\n        }\n      }\n\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      // root state may not available, for example when root navigators switch inside the container\n      if (!state) {\n        return;\n      }\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}