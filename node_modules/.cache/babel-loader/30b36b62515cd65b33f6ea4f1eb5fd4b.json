{"ast":null,"code":"var _jsxFileName = \"C:\\\\Web dev\\\\practiceReact\\\\anime\\\\src\\\\Cast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport delayAdapterEnhancer from 'axios-delay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Cast = _ref => {\n  _s();\n\n  let {\n    id\n  } = _ref;\n  let url = `https://api.jikan.moe/v3/anime/${id}/characters_staff`;\n  const [cast, setCast] = useState([]);\n  const api = axios.create({\n    adapter: delayAdapterEnhancer(axios.defaults.adapter)\n  });\n  let cancelToken;\n  useEffect(() => {\n    (async function () {\n      try {\n        if (typeof cancelToken != typeof undefined) cancelToken.cancel(\"Canceling previous req\");\n        cancelToken = axios.CancelToken.source();\n        const res = await api.get(url, {\n          cancelToken: cancelToken.token,\n          delay: 8000\n        });\n        setCast(res.data.characters);\n        console.log(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    })();\n  }, [url]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cast\",\n    children: cast.map((character, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-row\",\n      children: [character.voice_actors.map((actor, i) => actor.language.includes(\"Japanese\") ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"actor-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"actor-name\",\n            children: actor.name\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"actor-pic\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: actor.image_url,\n              alt: \"actor-pic\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 52\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)\n      }, void 0, false) : null), character.voice_actors.map((actor, i) => actor.language.includes(\"Japanese\") ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"actor-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"actor-name\",\n            children: actor.name\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"actor-pic\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: actor.image_url,\n              alt: \"actor-pic\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 52\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)\n      }, void 0, false) : null)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Cast, \"AdIVhaH7Hx6re/u/3OnvwdzRW0I=\");\n\n_c = Cast;\nexport default Cast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cast\");","map":{"version":3,"sources":["C:/Web dev/practiceReact/anime/src/Cast.js"],"names":["React","useEffect","useState","axios","delayAdapterEnhancer","Cast","id","url","cast","setCast","api","create","adapter","defaults","cancelToken","undefined","cancel","CancelToken","source","res","get","token","delay","data","characters","console","log","err","map","character","i","voice_actors","actor","language","includes","name","image_url"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport delayAdapterEnhancer from 'axios-delay';\r\n\r\nconst Cast = ({id}) => {\r\n\r\n    let url = `https://api.jikan.moe/v3/anime/${id}/characters_staff`;\r\n\r\n    const [cast, setCast] = useState([]);\r\n\r\n\r\n    const api = axios.create({\r\n        adapter: delayAdapterEnhancer(axios.defaults.adapter)\r\n      });\r\n\r\n      let cancelToken;\r\n\r\n    useEffect(()=>{\r\n        (async function()\r\n        {\r\n            try\r\n            {\r\n                if (typeof cancelToken != typeof undefined) cancelToken.cancel(\"Canceling previous req\");\r\n                cancelToken = axios.CancelToken.source();\r\n\r\n                const res = await api.get(url, {cancelToken: cancelToken.token, delay: 8000});\r\n                setCast(res.data.characters);\r\n                console.log(res.data);\r\n            }\r\n            catch(err)\r\n            {\r\n                console.log(err);\r\n            }\r\n        })();\r\n    }, [url]);\r\n\r\n    return (\r\n        <div className='cast'>\r\n            {cast.map((character, i)=>\r\n            <div key={i} className='character-row'>\r\n                {character.voice_actors.map((actor, i)=>actor.language.includes(\"Japanese\") ? <>\r\n                    <div className=\"actor-box\">\r\n                        <div key={i} className='actor-name'>{actor.name}</div>\r\n                        <div className='actor-pic'><img src={actor.image_url} alt=\"actor-pic\"></img></div>\r\n                    </div>\r\n\r\n                </> : (null))}\r\n\r\n                {character.voice_actors.map((actor, i)=>actor.language.includes(\"Japanese\") ? <>\r\n                    <div className=\"actor-box\">\r\n                        <div key={i} className='actor-name'>{actor.name}</div>\r\n                        <div className='actor-pic'><img src={actor.image_url} alt=\"actor-pic\"></img></div>\r\n                    </div>\r\n\r\n                </> : (null))}\r\n            </div>)}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cast;\r\n"]},"metadata":{},"sourceType":"module"}