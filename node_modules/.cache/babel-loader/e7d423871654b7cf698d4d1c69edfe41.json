{"ast":null,"code":"var _jsxFileName = \"C:\\\\Web dev\\\\practiceReact\\\\anime\\\\src\\\\Cast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Cast = _ref => {\n  _s();\n\n  let {\n    id\n  } = _ref;\n  let url = `https://api.jikan.moe/v3/anime/${id}/characters_staff`;\n  const [cast, setCast] = useState([]);\n  useEffect(() => {\n    (async function () {\n      try {\n        const res = await axios.get(url);\n        setCast(res.data.characters);\n        console.log(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    })();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cast\",\n    children: cast.map((character, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"character-name\",\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: character.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 50\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"character-pic\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: character.image_url,\n          alt: \"character-pic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 18\n      }, this), character.voice_actors.map((actor, i) => actor.language.includes(\"Japanese\") ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"actor-name\",\n          children: [\"Japanese: \", actor.name]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 97\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"actor-pic\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: actor.image_url,\n            alt: \"actor-pic\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 188\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 161\n        }, this)]\n      }, void 0, true) : null), character.voice_actors.map((actor, i) => actor.language.includes(\"English\") ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"actor-name\",\n        children: [\"English: \", actor.name]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 94\n      }, this) : null)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Cast, \"AdIVhaH7Hx6re/u/3OnvwdzRW0I=\");\n\n_c = Cast;\nexport default Cast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cast\");","map":{"version":3,"sources":["C:/Web dev/practiceReact/anime/src/Cast.js"],"names":["React","useEffect","useState","axios","Cast","id","url","cast","setCast","res","get","data","characters","console","log","err","map","character","i","name","image_url","voice_actors","actor","language","includes"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,IAAI,GAAG,QAAU;AAAA;;AAAA,MAAT;AAACC,IAAAA;AAAD,GAAS;AAEnB,MAAIC,GAAG,GAAI,kCAAiCD,EAAG,mBAA/C;AAEA,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AAGAD,EAAAA,SAAS,CAAC,MAAI;AACV,KAAC,kBACD;AACI,UACA;AACI,cAAMQ,GAAG,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAUJ,GAAV,CAAlB;AACAE,QAAAA,OAAO,CAACC,GAAG,CAACE,IAAJ,CAASC,UAAV,CAAP;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACE,IAAhB;AACH,OALD,CAMA,OAAMI,GAAN,EACA;AACIF,QAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACH;AACJ,KAZD;AAaH,GAdQ,EAcN,EAdM,CAAT;AAgBA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,cACKR,IAAI,CAACS,GAAL,CAAS,CAACC,SAAD,EAAYC,CAAZ,kBACV;AAAa,MAAA,SAAS,EAAC,eAAvB;AAAA,8BACK;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,+BAAgC;AAAA,oBAASD,SAAS,CAACE;AAAnB;AAAA;AAAA;AAAA;AAAA;AAAhC;AAAA;AAAA;AAAA;AAAA,cADL,eAEK;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,+BAA+B;AAAK,UAAA,GAAG,EAAEF,SAAS,CAACG,SAApB;AAA+B,UAAA,GAAG,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA;AAA/B;AAAA;AAAA;AAAA;AAAA,cAFL,EAGKH,SAAS,CAACI,YAAV,CAAuBL,GAAvB,CAA2B,CAACM,KAAD,EAAQJ,CAAR,KAAYI,KAAK,CAACC,QAAN,CAAeC,QAAf,CAAwB,UAAxB,iBAAsC;AAAA,gCAAE;AAAa,UAAA,SAAS,EAAC,YAAvB;AAAA,mCAA+CF,KAAK,CAACH,IAArD;AAAA,WAAUD,CAAV;AAAA;AAAA;AAAA;AAAA,gBAAF,eAAkE;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,iCAA2B;AAAK,YAAA,GAAG,EAAEI,KAAK,CAACF,SAAhB;AAA2B,YAAA,GAAG,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAAlE;AAAA,sBAAtC,GAAiM,IAAxO,CAHL,EAIKH,SAAS,CAACI,YAAV,CAAuBL,GAAvB,CAA2B,CAACM,KAAD,EAAQJ,CAAR,KAAYI,KAAK,CAACC,QAAN,CAAeC,QAAf,CAAwB,SAAxB,iBAAqC;AAAa,QAAA,SAAS,EAAC,YAAvB;AAAA,gCAA8CF,KAAK,CAACH,IAApD;AAAA,SAAUD,CAAV;AAAA;AAAA;AAAA;AAAA,cAArC,GAAwG,IAA/I,CAJL;AAAA,OAAUA,CAAV;AAAA;AAAA;AAAA;AAAA,YADC;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAnCD;;GAAMd,I;;KAAAA,I;AAqCN,eAAeA,IAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\n\r\nconst Cast = ({id}) => {\r\n\r\n    let url = `https://api.jikan.moe/v3/anime/${id}/characters_staff`;\r\n\r\n    const [cast, setCast] = useState([]);\r\n\r\n\r\n    useEffect(()=>{\r\n        (async function()\r\n        {\r\n            try\r\n            {\r\n                const res = await axios.get(url);\r\n                setCast(res.data.characters);\r\n                console.log(res.data);\r\n            }\r\n            catch(err)\r\n            {\r\n                console.log(err);\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <div className='cast'>\r\n            {cast.map((character, i)=>\r\n            <div key={i} className='character-row'>\r\n                {<div className='character-name'><strong>{character.name}</strong></div>}\r\n                {<div className='character-pic'><img src={character.image_url} alt=\"character-pic\"></img></div>}\r\n                {character.voice_actors.map((actor, i)=>actor.language.includes(\"Japanese\") ? <><div key={i} className='actor-name'>Japanese: {actor.name}</div><div className='actor-pic'><img src={actor.image_url} alt=\"actor-pic\"></img></div></> : (null))}\r\n                {character.voice_actors.map((actor, i)=>actor.language.includes(\"English\") ? <div key={i} className='actor-name'>English: {actor.name}</div> : (null))}\r\n            </div>)}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cast;\r\n"]},"metadata":{},"sourceType":"module"}